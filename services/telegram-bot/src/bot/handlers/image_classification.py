import logging
from aiogram import Dispatcher, Router, F
from aiogram.types import Message, PhotoSize, Document
from aiogram.filters import Command
from io import BytesIO
import uuid

from services.classification_service import ClassificationService
from utils.file_validator import validate_image_file
from utils.response_formatter import format_classification_result
from keyboards.reply import get_main_keyboard
from config import Config
from middlewares.album import AlbumMiddleware

logger = logging.getLogger(__name__)
router = Router()
router.message.middleware(AlbumMiddleware())


SUPPORTED_EXTENSIONS = {".jpg", ".jpeg", ".png", ".webp"}


@router.message(Command("classify"))
async def cmd_classify(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, WEBP\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."
    )


def is_supported(filename: str) -> bool:
    return any(filename.lower().endswith(ext) for ext in SUPPORTED_EXTENSIONS)


async def extract_file_and_name(
        message: Message,
        image_filename: str = None
    ) -> tuple[BytesIO, str] | None:
    """
    Extracts file and filename from a message if it's a supported image.
    For photos, uses image_filename if provided. For documents, always uses the original filename
    """
    if message.photo:
        file = message.photo[-1]
        filename = image_filename or f"photo_{file.file_id[:4]}.jpg"
    elif message.document and is_supported(message.document.file_name):
        file = message.document
        filename = message.document.file_name  # Always use original name for documents
    else:
        return None
    
    file_info = await message.bot.get_file(file.file_id)
    file_data = await message.bot.download_file(file_info.file_path)
    file_bytes = file_data.read()
    return BytesIO(file_bytes), filename


async def process_images(files: list[tuple[BytesIO, str]]) -> dict:
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    classification_service = ClassificationService()
    return await classification_service.classify_multiple_images(files)


@router.message(F.photo | F.document)
async def handle_images(message: Message, album: list[Message] = None):
    """
    Universal handler for single and batch images.
    If album is not None, it's a batch; otherwise, it's a single image.
    """
    files = []
    messages = []
    processing_message = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(—è)...")
    if album:
        # Batch of images (album)
        for idx, msg in enumerate(album, start=1):
            result = await extract_file_and_name(msg, image_filename=f"image_{idx}.jpg")
            if result:
                files.append(result)
                messages.append(msg)
        if not files:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–ª—å–±–æ–º–µ.")
            return
    else:
        # Single image
        result = await extract_file_and_name(message, image_filename="image.jpg")
        if not result:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è JPG, JPEG, PNG, WEBP.")
            return
        files.append(result)
        messages.append(message)

    try:
        response = await process_images(files)
    except Exception as e:
        logger.error(f"Error during classification: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await processing_message.delete()

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–ª–∞–µ–º reply –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for res, msg in zip(response.get("results", []), messages):
        formatted_text = format_classification_result(res)
        await msg.reply(formatted_text, parse_mode="HTML")


def register_image_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    dp.include_router(router)
