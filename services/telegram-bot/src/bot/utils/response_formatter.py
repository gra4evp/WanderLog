from typing import Any
from config import CLASS_INFO


def format_classification_result(result: dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç API
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not result:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"

    return format_single_result(result)
    


def format_single_result(result: dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    predicted_class = result.get('predicted_class', 'Unknown')
    class_confidences = result.get('class_confidences', [])
    top_confidence = result.get('top_confidence', 'Unknown')
    image_name = result.get('image_name', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞
    class_info = CLASS_INFO.get(predicted_class, {'emoji': 'üè†', 'description': 'Unknown'})
    class_emoji = class_info['emoji']
    class_description = class_info['description']
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    prob_text = format_probabilities(
        class_confidences,
        sorted_by_probability=False
    )
    if top_confidence != 'Unknown':
        top_confidence = f"{top_confidence * 100:.1f}%"
    text_lines = [
        f"üè† <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n",
        f"üì∏ <b>–§–∞–π–ª:</b> {image_name}",
        f"{class_emoji} <b>–ö–ª–∞—Å—Å –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞:</b> <code>{predicted_class}</code> ‚Äî {top_confidence}",
        f"‚ÑπÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> [{class_description}]\n",
        f"üìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:</b>",
        prob_text
    ]
    
    return "\n".join(text_lines)


def format_probabilities(
        probabilities: dict[str, float],
        sorted_by_probability: bool = False
    ) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"""
    class_names = list(CLASS_INFO.keys())
    
    if len(probabilities) != len(class_names):
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤"
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∫–ª–∞—Å—Å, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å) –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    class_probs = list(probabilities.items())
    if sorted_by_probability:
        class_probs.sort(key=lambda x: x[1], reverse=True)
    
    formatted_lines = []
    for class_name, prob in class_probs:
        info = CLASS_INFO.get(class_name, {'emoji': 'üè†'})
        emoji = info['emoji']
        percentage = prob * 100
        bar_length = round(percentage / 5)  # 5% = 1 —Å–∏–º–≤–æ–ª
        bar = '‚ñà' * bar_length + '‚ñë' * (20 - bar_length)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 10 –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        percent_str = f" {percentage:.1f}%" if percentage < 10 else f"{percentage:.1f}%"
        formatted_lines.append(
            f"{emoji} {class_name}: {percent_str} {bar}"
        )
    
    return "\n".join(formatted_lines)
