
networks:
  wanderlog_network:
    name: wanderlog_network
    driver: bridge

volumes:
  timescaledb_data:


x-logging: &default-logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: 10
      compress: "true"


services:
  python-backend:
    container_name: python-backend
    build:
      context: ./services/python-backend
      dockerfile: Dockerfile
    environment:
      - TZ=Europe/Moscow  # Временная зона
      - APP_PORT=${APP_PORT} # Добавляем переменную для порта
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/${POSTGRES_DB}  # URL для подключения к продовой базе данных
    ports:
      - "8015:${APP_PORT}"
    volumes:
      # Для hot-reload кода
      - ./services/python-backend/src/app:/python-backend/src/app:rw
    depends_on:
      timescaledb:
        condition: service_healthy
    env_file:
      - path: ./services/python-backend/.env
        required: True
    # restart: unless-stopped
    command: python3 main.py

  telegram-bot:
    container_name: telegram-bot
    build:
      context: ./services/telegram-bot
      dockerfile: Dockerfile
    environment:
      - TZ=Europe/Moscow
    volumes:
      # Для hot-reload кода
      - ./services/telegram-bot/src/bot:/telegram-bot/src/bot:rw
    depends_on:
      - python-backend
    env_file:
      - path: ./services/telegram-bot/.env
        required: True
    # restart: unless-stopped
    command: python3 main.py

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   restart: unless-stopped
  #   networks:
  #     - wanderlog_network
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./services/grafana/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/ds.yaml:ro
  #     - ./services/grafana/grafana.ini:/etc/grafana/grafana.ini
  #   environment:
  #     - GF_SECURITY_ALLOW_EMBEDDING=true
  #   depends_on:
  #     - timescaledb
  #   <<: *default-logging

  timescaledb:
    image: timescale/timescaledb:2.21.0-pg17
    container_name: timescaledb
    restart: unless-stopped
    networks:
      - wanderlog_network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    # - ./services/timescaledb/init.sql:/docker-entrypoint-initdb.d/init.sql  # Добавляем сюда наш скрипт
    <<: *default-logging

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    networks:
      - wanderlog_network
    depends_on:
      - timescaledb
    <<: *default-logging
